name: Deploy EKS Cluster

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create an IAM Role for GitHub Actions and its trust policy
      run: |
        STACK_NAME="MyIAMRoleStack"
        TEMPLATE_FILE="file://cloudfformation/CloudFormationFullAccess.yaml"
        REGION=${{ secrets.AWS_REGION }}

          # Check if stack exists
          STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION 2>&1 || echo "does not exist")

          if [[ $STACK_EXISTS == *"does not exist"* ]]; then
            echo "Stack does not exist. Creating stack..."
            aws cloudformation create-stack --stack-name $STACK_NAME --template-body $TEMPLATE_FILE --capabilities CAPABILITY_NAMED_IAM --region $REGION
          else
            echo "Stack exists. Delete IAM role and its stack before creating a new stack..."
            aws iam list-attached-role-policies --role-name GithubCICDRole --query 'AttachedPolicies[*].PolicyArn' --output text | xargs -n 1 aws iam detach-role-policy --role-name GithubCICDRole --policy-arn
            aws iam delete-role --role-name GithubCICDRole
            aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION
            aws cloudformation create-stack --stack-name $STACK_NAME --template-body $TEMPLATE_FILE --capabilities CAPABILITY_NAMED_IAM --region $REGION
          fi

    - name: Deploy EKS using CloudFormation
      run: |
        aws cloudformation deploy \
          --template-file cloudfformation/EKS_setup.yaml \
          --stack-name MyEKSCluster \
          --capabilities CAPABILITY_NAMED_IAM
